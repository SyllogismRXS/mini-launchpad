#!/usr/bin/env python

import sys
import time
import logging
import os
import shutil
import tempfile
import argparse
import subprocess

from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler
from watchdog.events import FileSystemEventHandler
from argparse import ArgumentDefaultsHelpFormatter

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

class Logger:
    """Helper class to print log to console and filename"""
    def __init__(self, filepath):
        self.terminal = sys.stdout
        self.log = open(filepath, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)
        self.terminal.flush()
        self.log.flush()

class MiniLaunchpad (FileSystemEventHandler):
    def __init__(self):
        parser = argparse.ArgumentParser(description='Your Local Build Server of Awesomeness',
                                        formatter_class=ArgumentDefaultsHelpFormatter)
        add = parser.add_argument
        add('--dist', nargs='+', default='xenial',
                           help='Distributions you want to support')
        add('--arch', nargs='+', default='amd64',
                           help='Architectures you want to support')
        add('--ftp-loc', default='.',
                           help='FTP server location')
        add('--pbuilder-config',
                           default=os.path.expanduser('~/.pbuilderrc'),
                           help='pbuilder config file location')
        add('--dput-config', default=os.path.expanduser('~/.dput.cf'),
                           help='dput config file location')
        add('--dput-name', default='thingymaboop',
                           help='dput host')
        add('--log-path', default=os.path.expanduser('~/.mini-launchpad/log/'),     # Is this a decent spot for logs?
                           help='Store logs in specified path.')
        self.args = parser.parse_args()

        # TODO check for existence of dput.cf, pbuilder-config

        self.file_list = []

        self.watch(self.args.ftp_loc)

    def on_any_event(self, event):
        if event.event_type == 'created':
            self.file_list.append(event.src_path)

        if event.event_type == 'created' and event.src_path.endswith('.changes'):
            self.process_upload()

    def watch(self, path):
        self.event_handler = self
        self.observer = Observer()
        self.observer.schedule(self.event_handler, path, recursive=True)
        self.observer.start()

    def setup_pbuilder(self):
        # Take list of distributions / architectures and setup pbuilder
        # environments
        pass

    def process_upload(self):
        print('Waiting 2 seconds...')
        time.sleep(2)
        print('Processing upload')

        # move the input files out of the incoming ftp directory
        input_files_tmp_dir = tempfile.mkdtemp()
        print('Input files tmp dir: %s' % input_files_tmp_dir)
        for f in self.file_list:
            shutil.move(f, input_files_tmp_dir + "/")
        self.file_list = []

        for dist in self.args.dist:
            for arch in self.args.arch:
                self.build_package(input_files_tmp_dir, dist,arch)

        shutil.rmtree(input_files_tmp_dir)

    def build_package(self, input_files_tmp_dir, dist, arch):
        # TODO for each build, write output to different log file
        # currently hardcoded this DIST and ARCH. Must be changed!!
        self.log(dist, arch)
        # create a temporary directory for this build
        tmp_dir = tempfile.mkdtemp()
        print('Temp dir (%s, %s): %s' % (dist, arch, tmp_dir))

        for f in os.listdir(input_files_tmp_dir):
            shutil.copy(os.path.join(input_files_tmp_dir, f), tmp_dir + "/")

        with cd(tmp_dir):
            dsc_file = None
            for file in os.listdir(tmp_dir):
                if file.endswith(".dsc"):
                    dsc_file = file

            if dsc_file is None:
                print('Cannot find dsc file')
                return

            config_file= self.args.pbuilder_config

            cmd = "DIST="+dist+" ARCH="+arch+" pbuilder --build " \
                  "--configfile "+config_file+" " \
                  "--buildresult ./ " + dsc_file

            print('Command: %s', cmd)
            subprocess.call(cmd, shell=True)

            dput_success = False
            for file in os.listdir(tmp_dir):
                if file.endswith(arch + ".changes"):
                    # TODO make --config argument and dput name (gtri-binary)
                    # configurable
                    dput_cmd = "dput --config " + self.args.dput_config + " " +\
                               self.args.dput_name + " " + file
                    print("dput command: %s" % dput_cmd)
                    subprocess.call(dput_cmd, shell=True)
                    dput_success = True

            if not dput_success:
                print('Failed to dput')
                subprocess.call("ls")

        print('Removing tmp dir: %s' % tmp_dir)
        shutil.rmtree(tmp_dir)

    def log(self, dist, arch):
        filename = dist + '_' + arch + '.log'
        # allow user to be able to specify log folder location
        if not os.path.exists(self.args.log_path):
            os.makedirs(self.args.log_path)
        filepath = os.path.join(self.args.log_path, filename)

        sys.stdout = Logger(filepath)

    def run(self):
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.observer.stop()
        self.observer.join()

if __name__ == "__main__":
    mlp = MiniLaunchpad()
    mlp.run()
