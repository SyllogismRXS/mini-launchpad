#!/usr/bin/env python

import sys
import time
import logging
import os
import shutil
import tempfile
import argparse
import subprocess
from threading import Thread, Lock

from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler
from watchdog.events import FileSystemEventHandler
from argparse import ArgumentDefaultsHelpFormatter

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)


class MiniLaunchpad (FileSystemEventHandler):
    def __init__(self):
        parser = argparse.ArgumentParser(description='Your Local Build Server of Awesomeness',
                                        formatter_class=ArgumentDefaultsHelpFormatter)
        add = parser.add_argument
        add('--dist', nargs='+', default='xenial',
                           help='Distributions you want to support')
        add('--arch', nargs='+', default='amd64',
                           help='Architectures you want to support')
        add('--ftp-incoming', default='.',
                           help='FTP server location')
        add('--pbuilder-config',
                           default=os.path.expanduser('~/.pbuilderrc'),
                           help='pbuilder config file location')
        add('--dput-config', default=os.path.expanduser('~/.dput.cf'),
                           help='dput config file location')
        add('--dput-name', default='thingymaboop',
                           help='dput host')
        add('--log-path', default=os.path.expanduser('~/.mini-launchpad/log/'),     # Is this a decent spot for logs?
                           help='Store logs in specified path.')
        self.args = parser.parse_args()

        if not os.path.isfile(self.args.dput_config):
            print('dput config does not exist: %s' % self.args.dput_config)
            sys.exit(-1)

        if not os.path.isfile(self.args.pbuilder_config):
            print('pbuilder config does not exist: %s' % self.args.pbuilder_config)
            sys.exit(-1)

        self.file_list = []

	self.mutex = Lock()

	self.remove_oninit(self.args.ftp_incoming)

        self.watch(self.args.ftp_incoming)

    def on_any_event(self, event):
        if event.event_type == 'created':
            self.file_list.append(event.src_path)

        if event.event_type == 'created' and event.src_path.endswith('.changes'):
            thread = Thread(target = self.process_upload, args = (event.src_path,))
            thread.start()

    def watch(self, path):
        self.event_handler = self
        self.observer = Observer()
        self.observer.schedule(self.event_handler, path, recursive=True)
        self.observer.start()

    def setup_pbuilder(self):
        # Take list of distributions / architectures and setup pbuilder
        # environments
        pass

    def process_upload(self, changes_file):
        print('Waiting 2 seconds...')
        time.sleep(2)
        print('Processing upload')

	# Helper variables
	firstpkg = True
	pkg_file = ""
	pkg_dict = dict()

        # move the input files out of the incoming ftp directory
        input_files_tmp_dir = tempfile.mkdtemp()
        print('Input files tmp dir: %s' % input_files_tmp_dir)
        for f in self.file_list:
	    # Obtain the name of the package we are preparing to process
	    if f.endswith(".changes") and firstpkg:
		pkg_file = os.path.basename(f)
		pkg_file = pkg_file.split("_")[0]
		firstpkg = False
	    # Create helpers in order to ensure files of other pkgs don't get moved over
	    base_filename = os.path.splitext(os.path.basename(f))[0]
	    pkg_dict[f] = base_filename.split("_")[0]
	# Serves as security check that we aren't moving any file that doesn't correspond
	# to the package we are preparing to build.
	for file_type, file_name in pkg_dict.iteritems():
	    if file_name == pkg_file:
	          shutil.move(os.path.join(changes_file, file_type), input_files_tmp_dir + "/")

        self.file_list = []

        # Create a new thread for each build
        threads = []
        for dist in self.args.dist:
            for arch in self.args.arch:
                thread = Thread(target = self.build_package,
                                args = (input_files_tmp_dir, dist, arch, pkg_file))
                thread.start()
                threads.append(thread)

        # Wait for all build threads to complete
        for thread in threads:
            thread.join()

        shutil.rmtree(input_files_tmp_dir) # remove temporary directory

    def build_package(self, input_files_tmp_dir, dist, arch, pkg_file):
	self.mutex.acquire()
	try:
		# Create build logs
		log_file = self.log(dist, arch, pkg_file)
		# create a temporary directory for this build
		tmp_dir = tempfile.mkdtemp()
		print('Temp dir (%s, %s): %s' % (dist, arch, tmp_dir))

		for f in os.listdir(input_files_tmp_dir):
		    shutil.copy(os.path.join(input_files_tmp_dir, f), tmp_dir + "/")

		with cd(tmp_dir):
		    dsc_file = None
		    for file in os.listdir(tmp_dir):
			if file.endswith(".dsc"):
			    dsc_file = file

		    if dsc_file is None:
			print('Cannot find dsc file')
			return

		    config_file= self.args.pbuilder_config

		    cmd = "DIST="+dist+" ARCH="+arch+" pbuilder --build " \
			  "--configfile "+config_file+" " \
			  "--buildresult ./ " + dsc_file

		    print('Command: %s', cmd)
		    subprocess.call(cmd, shell=True, stdout=log_file, stderr=subprocess.STDOUT)

		    dput_success = False
		    for file in os.listdir(tmp_dir):
			if file.endswith(arch + ".changes"):
			    dput_cmd = "dput --config " + self.args.dput_config + " " +\
				       self.args.dput_name + " " + file
			    print("dput command: %s" % dput_cmd)
			    subprocess.call(dput_cmd, shell=True)
			    dput_success = True

		    if not dput_success:
			print('Failed to dput')
			subprocess.call("ls")

		print('Removing tmp dir: %s' % tmp_dir)
		shutil.rmtree(tmp_dir, Lock)
	finally:
		self.mutex.release()

    def log(self, dist, arch, pkg_name):
        # Add timestamp to our log file
        timeTmp = time.strftime('%Y_%m_%d-%H_%M_%S-')
        filename = timeTmp + dist +'_'+arch+'_'+pkg_name+'.log'

        # allow user to be able to specify log folder location
        if not os.path.exists(self.args.log_path):
            os.makedirs(self.args.log_path)
        filepath = os.path.join(self.args.log_path, filename)

        # open the file for writing
	logfile = open(filepath, "w")
	return logfile

    def remove_oninit(self, path):
	# If our directory has something within. Purge!
	if not len(os.listdir(path)) == 0:
	    for file in os.listdir(path):
		try:
		    full_path = os.path.join(path, file)
		    os.remove(full_path)
		except:
		    print("Error removing the current file: %s" % full_path)

    def run(self):
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.observer.stop()
        self.observer.join()

if __name__ == "__main__":
    mlp = MiniLaunchpad()
    mlp.run()
